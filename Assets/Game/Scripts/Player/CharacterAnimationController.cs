using FishNet.Object;
using UnityEngine;

namespace Game.Scripts.Player
{
    [DefaultExecutionOrder(-40)]
    public class CharacterAnimationController : NetworkBehaviour
    {
        private bool _isJumping;
        public PlayerRoot playerRoot;

        // throttle –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –±—ñ–≥–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        [SerializeField] private float locomotionSendInterval = 0.05f; // 20 —Ä–∞–∑/—Å
        [SerializeField] private float locomotionDeltaEpsilon = 0.01f;  // –ø–æ—Ä—ñ–≥ –∑–º—ñ–Ω–∏
        private float _nextSendTime;
        private float _lastSentLocomotion;

        private void OnEnable()
        {
            if (playerRoot.characterInput != null)
                playerRoot.characterInput.OnUpdateInput += InputUpdated;
        }

        private void OnDisable()
        {
            if (playerRoot.characterInput != null)
                playerRoot.characterInput.OnUpdateInput -= InputUpdated;
        }

        private void InputUpdated()
        {
            if (!IsOwner)
                return;

            // –°—Ç—Ä–∏–±–æ–∫
            if (playerRoot.characterInput.jumpPressed &&
                playerRoot.groundChecker.isGrounded &&
                !_isJumping)
            {
                _isJumping = true;
                JumpServerRpc();
            }

            // üî• –ê—Ç–∞–∫–∞ ‚Äî —Ç—Ä–∏–≥–µ—Ä "Attack"
            if (playerRoot.characterInput.attackPressed)
            {
                AttackServerRpc();
            }
        }

        private void Update()
        {
            if (IsOwner)
            {
                if (playerRoot.groundChecker.isGrounded && _isJumping)
                    _isJumping = false;
            }
            else if (IsServer)
            {
                // –õ–æ–≥—ñ–∫–∞ –±–æ—Ç—ñ–≤ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
            }
        }

        public float GetLocomotion()
        {
            return playerRoot.animator.GetFloat("Locomotion");
        }

        /// <summary>
        /// –í–ª–∞—Å–Ω–∏–∫ –≤–∏–∫–ª–∏–∫–∞—î —Ü–µ —â–æ—Ñ—ñ–∫—Å-–∫–∞–¥—Ä (–¥–∏–≤. CharacterMovement.FixedUpdate).
        /// –õ–æ–∫–∞–ª—å–Ω–æ —Ä–æ–±–∏–º–æ –ø–ª–∞–≤–Ω–∏–π –ª–µ—Ä–ø —ñ, —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—å —Å—É—Ç—Ç—î–≤–æ ‚Äî —à–ª–µ–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó.
        /// </summary>
        public void SetLocomotion(float normalizedSpeed01, float lerpParameter)
        {
            float target = Mathf.Clamp01(normalizedSpeed01);
            float value = Mathf.Lerp(GetLocomotion(), target, Time.fixedDeltaTime * lerpParameter);
            playerRoot.animator.SetFloat("Locomotion", value);

            if (IsOwner)
                MaybeSendLocomotion(value);
        }

        private void MaybeSendLocomotion(float value)
        {
            if (Time.time < _nextSendTime)
                return;

            if (Mathf.Abs(value - _lastSentLocomotion) < locomotionDeltaEpsilon)
                return;

            _nextSendTime = Time.time + locomotionSendInterval;
            _lastSentLocomotion = value;
            LocomotionServerRpc(value);
        }

        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–π–º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞ —ñ —Ä–æ–∑—Å–∏–ª–∞—î —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞–º
        [ServerRpc(RequireOwnership = true)]
        private void LocomotionServerRpc(float value)
        {
            LocomotionObserversRpc(value);
        }

        // –ù–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞—Ö —Å—Ç–∞–≤–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É (–±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ª–µ—Ä–ø—É)
        [ObserversRpc]
        private void LocomotionObserversRpc(float value)
        {
            if (IsOwner)
                return; // –≤–ª–∞—Å–Ω–∏–∫ —É–∂–µ –æ–Ω–æ–≤–∏–≤ –ª–æ–∫–∞–ª—å–Ω–æ

            playerRoot.animator.SetFloat("Locomotion", Mathf.Clamp01(value));
        }

        [ServerRpc(RequireOwnership = true)]
        private void JumpServerRpc()
        {
            TriggerAnimation("Jump");
            TriggerAnimationObserversRpc("Jump");
        }

        // ‚úÖ –ê—Ç–∞–∫–∞ –ø–æ –º–µ—Ä–µ–∂—ñ
        [ServerRpc(RequireOwnership = true)]
        private void AttackServerRpc()
        {
            TriggerAnimation("Attack");
            TriggerAnimationObserversRpc("Attack");
        }

        [ObserversRpc]
        public void TriggerAnimationObserversRpc(string name)
        {
            TriggerAnimation(name);
        }

        private void TriggerAnimation(string name)
        {
            playerRoot.animator.SetTrigger(name);
        }
    }
}
